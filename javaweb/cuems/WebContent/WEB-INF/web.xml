<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" 
	xmlns="http://java.sun.com/xml/ns/javaee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
	
	<context-param>
		<param-name>spring.profiles.active</param-name>
		<param-value>dev</param-value>
	</context-param>
	<context-param>
		<param-name>spring.profiles.default</param-name>
		<param-value>dev</param-value>
	</context-param>
	<context-param>
		<param-name>spring.liveBeansView.mbeanDomain</param-name>
		<param-value>dev</param-value>
	</context-param>
<!-- 加载spring容器 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:/spring/applicationContext-*.xml</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<!-- springMVC前端控制器DispatcherServlet -->
	<servlet>
		<servlet-name>springmvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- contextConfigLocation配置springmvc加载的配置文件（配置处理器映射器、适配器等等）
		如果不配置contextConfigLocation，默认加载的是/WEB-INF/servlet名称-servlet.xml -->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:/spring/springmvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>springmvc</servlet-name>
		<!-- 
		第一种：*.action，访问.action结尾由DispatcherServlet进行解析
		第二种：/，所以访问的地址都由DispatcherServlet进行解析，对于静态文件的解析需要配置不让DispatcherServlet进行解析
		使用此种方式可以实现RESTful风格的url
		第三种：/*，这样配置不对，使用这种配置，最终要转发到一个jsp页面时，
		仍然会由DispatcherServlet解析jsp地址，不能根据jsp页面找到handler，会报错 -->
		<url-pattern>*.action</url-pattern>
	</servlet-mapping>
	
	<!-- springMVC前端控制器DispatcherServlet -->
	 <servlet>
		<servlet-name>springmvc_rest</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	<!-- 	contextConfigLocation配置springmvc加载的配置文件（配置处理器映射器、适配器等等）
		如果不配置contextConfigLocation，默认加载的是/WEB-INF/servlet名称-servlet.xml -->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:/spring/springmvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>springmvc_rest</servlet-name>
		
		<!-- 第一种：*.action，访问.action结尾由DispatcherServlet进行解析
		第二种：/，所以访问的地址都由DispatcherServlet进行解析，对于静态文件的解析需要配置不让DispatcherServlet进行解析
		使用此种方式可以实现RESTful风格的url
		第三种：/*，这样配置不对，使用这种配置，最终要转发到一个jsp页面时，
		仍然会由DispatcherServlet解析jsp地址，不能根据jsp页面找到handler，会报错 -->
		<url-pattern>/</url-pattern>
	</servlet-mapping> 
	
<!-- spring Web MVC框架提供解决乱码方式 -->
	<filter>
		<filter-name>CharacterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<welcome-file-list>
		<welcome-file>jsp/login.jsp</welcome-file>
	</welcome-file-list>
	
	
	
</web-app>
